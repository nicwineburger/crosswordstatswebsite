{"version":3,"sources":["App.js","logo.svg","reportWebVitals.js","index.js"],"names":["runScript","key","date","a","request","fetch","method","header","body","JSON","stringify","response","json","image","console","log","returnString","Buffer","from","toString","App","useState","output","setOutput","authKey","setAuthKey","setDate","isSubmit","setIsSubmit","useEffect","run","out","img","indexOf","blob","Blob","substr","type","url","URL","createObjectURL","document","createElement","addEventListener","revokeObjectURL","once","className","alt","src","width","height","onSubmit","e","preventDefault","value","onChange","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","CssBaseline","getElementById"],"mappings":"4MAKMA,EAAS,uCAAG,WAAOC,EAAKC,GAAZ,qBAAAC,EAAA,4DACJ,sFACNC,EAAU,CAAC,SAAYH,EAAK,cAAiBC,GAFnC,SAGIG,MAFR,sFAEmB,CACzBC,OAAQ,OACRC,OAAQ,CACJ,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUN,KARX,cAGbO,EAHa,gBAUCA,EAASC,OAVV,UAUbC,EAVa,OAWdC,QAAQC,IAAIF,GACa,kCAArBA,EAAK,SAAwE,gCAArBA,EAAK,QAZnD,wBAaNG,EAAeC,EAAOC,KAAKL,EAAK,QAAa,UAAUM,SAAS,QAb1D,kBAcHH,GAdG,8EAAH,wDA4GAI,IAvFH,WACR,MAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAwBJ,mBAAS,IAAjC,mBAAOnB,EAAP,KAAawB,EAAb,KACA,EAAgCL,oBAAS,GAAzC,mBAAOM,EAAP,KAAiBC,EAAjB,KAmCA,OAjCAC,qBAAU,WACN,IAAMC,EAAG,uCAAG,kCAAA3B,EAAA,sEACQH,EAAUwB,EAAStB,GAD3B,OAEG,OADP6B,EADI,UAGAC,EAAMD,EAAIE,QAAQ,SAClBC,EAAO,IAAIC,KAAK,CAACJ,EAAIK,OAAOJ,IAAO,CAACK,KAAM,kBAC1CC,EAAMC,IAAIC,gBAAgBN,GAClBO,SAASC,cAAc,OAC7BC,iBAAiB,QAAQ,kBAAMJ,IAAIK,gBAAgBN,KAAM,CAACO,MAAM,IACtEtB,EAAUe,IARN,2CAAH,qDAaTR,MAED,CAACN,EAAStB,IAkBT,qBAAK4C,UAAU,MAAf,SACA,wBAAQA,UAAU,aAAlB,SACI,gCACKnB,GACG,gCACgB,KAAXL,GACG,6EAIQ,KAAXA,GACG,4BACI,qBAAKyB,IAAI,OAAOC,IAAK1B,EAAQ2B,MAAM,OAAOC,OAAO,cAM/DvB,GACE,8BACI,uBAAMwB,SAAU,SAACC,GAAD,OAAuBA,EAzBjDC,sBACNzB,GAAY,IAwBI,UACI,yDACA,uBACIS,KAAK,OACLiB,MAAO9B,EACP+B,SAAU,SAACH,GAAD,OAAO3B,EAAW2B,EAAEI,OAAOF,aAGzC,uBACA,sEACA,uBACIjB,KAAK,OACLiB,MAAOpD,EACPqD,SAAU,SAACH,GAAD,OAAO1B,EAAQ0B,EAAEI,OAAOF,aAGtC,uBACA,uBAAOjB,KAAK,0B,yDCvGzB,K,8GCYAoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCAdQ,IAASC,OACL,qCACI,cAACC,EAAA,EAAD,IACA,cAAChD,EAAA,EAAD,OAEJqB,SAAS4B,eAAe,SAM5BZ,M","file":"static/js/main.bcd4e917.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\n\r\nconst runScript = async (key, date) => {\r\n    let url = \"https://vkuqm7h21l.execute-api.us-east-1.amazonaws.com/default/nic-crossword-lambda\"\r\n    let request = {\"auth_key\": key, \"earliest_date\": date}\r\n\tlet response = await fetch(url, {\r\n        method: \"POST\",\r\n        header: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(request)\r\n    }) \r\n\tlet image = await response.json()\r\n    console.log(image);\r\n    if (image[\"message\"] !== \"auth key or date not provided\" && image[\"message\"] !== \"sorry, something went wrong\") {\r\n        let returnString = Buffer.from(image[\"content\"], 'base64').toString('utf8')\r\n        return returnString\r\n    }\r\n  \treturn \r\n}\r\n\r\n\r\n\r\nconst App = () => {\r\n    const [output, setOutput] = useState(\"\");\r\n    const [authKey, setAuthKey] = useState(\"\");\r\n    const [date, setDate] = useState(\"\");\r\n    const [isSubmit, setIsSubmit] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const run = async () => {\r\n            let out = await runScript(authKey, date);\r\n            if (out != null) {\r\n                let img = out.indexOf(\"<svg \")\r\n                let blob = new Blob([out.substr(img)], {type: 'image/svg+xml'})\r\n                let url = URL.createObjectURL(blob)\r\n                let image = document.createElement('img')\r\n                image.addEventListener('load', () => URL.revokeObjectURL(url), {once: true})\r\n                setOutput(url);\r\n                \r\n            }         \r\n\t\t\t\r\n        }\r\n        run();\r\n\r\n    }, [authKey, date]);\r\n    // async function run() {\r\n    //              let out = await runScript(authKey, date);           \r\n    //      \t\t let img = out.indexOf(\"<svg \")\r\n    //              let blob = new Blob([out.substr(img)], {type: 'image/svg+xml'})\r\n    //              let url = URL.createObjectURL(blob)\r\n    //              let image = document.createElement('img')\r\n    //              image.addEventListener('load', () => URL.revokeObjectURL(url), {once: true})\r\n    //              setOutput(url);\r\n    //              setIsSubmit(true)\r\n    //        } \r\n\r\n    function afterSubmission(event) {\r\n        event.preventDefault()\r\n        setIsSubmit(true)\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n        <header className=\"App-header\">\r\n            <div>\r\n                {isSubmit && (\r\n                    <div>\r\n                        {output === \"\" && (\r\n                            <p>\r\n                                loading... (this might take a minute or two)\r\n                            </p>\r\n                        )}\r\n                        {output !== \"\" && (\r\n                            <p>\r\n                                <img alt=\"plot\" src={output} width=\"1000\" height=\"700\" />\r\n                            </p>\r\n                        )}\r\n                    </div>\r\n                )}\r\n\r\n                {!isSubmit && (\r\n                    <div>\r\n                        <form onSubmit={(e) => afterSubmission(e)}>\r\n                            <label>Enter your auth-key:\r\n                            <input\r\n                                type=\"text\"\r\n                                value={authKey}\r\n                                onChange={(e) => setAuthKey(e.target.value)}\r\n                            />\r\n                            </label>\r\n                            <br/>\r\n                            <label>Enter earliest date (YYYY-MM-DD):\r\n                            <input\r\n                                type=\"text\"\r\n                                value={date}\r\n                                onChange={(e) => setDate(e.target.value)}\r\n                            />\r\n                            </label>\r\n                            <br/>\r\n                            <input type=\"submit\"/>\r\n                        </form>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </header>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@fontsource/roboto';\nimport CssBaseline from '@mui/material/CssBaseline'\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <>\n        <CssBaseline />\n        <App />\n    </>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}