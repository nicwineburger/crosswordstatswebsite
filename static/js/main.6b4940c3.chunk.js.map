{"version":3,"sources":["App.js","logo.svg","reportWebVitals.js","index.js"],"names":["runScript","key","date","a","streakUrl","fetch","method","headers","mode","streakRequest","json","streakResponse","streakDate","request","header","body","JSON","stringify","response","image","console","log","returnString","Buffer","from","toString","App","useState","output","setOutput","authKey","setAuthKey","setDate","isSubmit","setIsSubmit","event","preventDefault","localStorage","setItem","out","img","indexOf","blob","Blob","substr","type","url","URL","createObjectURL","document","createElement","addEventListener","revokeObjectURL","once","className","alt","src","width","height","href","onSubmit","e","afterSubmission","value","onChange","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","CssBaseline","getElementById"],"mappings":"4MAKMA,EAAS,uCAAG,WAAOC,EAAKC,GAAZ,6BAAAC,EAAA,yDAED,MAATD,EAFU,uBAgBG,WACTE,EAjBM,8DAgBG,WAhBH,+EAkBgBC,MAAMD,EAAW,CACvCE,OAAQ,MACRC,QAAS,CACL,eAAgB,mBAChB,QAASN,GAEbO,KAAM,SAxBA,cAkBNC,EAlBM,gBA0BiBA,EAAcC,OA1B/B,OA0BNC,EA1BM,OA2BNC,EAAaD,EAAc,QAAd,cAA8C,GAAG,GAClET,EAAOU,EA5BG,cAgCJ,sFACNC,EAAU,CAAC,SAAYZ,EAAK,cAAiBC,GAjCnC,UAkCIG,MAFR,sFAEmB,CACzBC,OAAQ,OACRQ,OAAQ,CACJ,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUJ,KAvCX,eAkCbK,EAlCa,iBAyCCA,EAASR,OAzCV,WAyCbS,EAzCa,OA0CdC,QAAQC,IAAIF,GACa,kCAArBA,EAAK,SAAwE,gCAArBA,EAAK,QA3CnD,wBA4CNG,EAAeC,EAAOC,KAAKL,EAAK,QAAa,UAAUM,SAAS,QA5C1D,kBA6CHH,GA7CG,8EAAH,wDAsJAI,IAlGH,WACR,MAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAwBJ,mBAAS,IAAjC,mBAAOzB,EAAP,KAAa8B,EAAb,KACA,EAAgCL,oBAAS,GAAzC,mBAAOM,EAAP,KAAiBC,EAAjB,KAJc,4CA8Bd,WAA+BC,GAA/B,qBAAAhC,EAAA,6DACIgC,EAAMC,iBACNF,GAAY,GACZG,aAAaC,QAAQ,QAASR,GAC9BO,aAAaC,QAAQ,OAAQpC,GAJjC,SAMoBF,EAAU8B,EAAS5B,GANvC,OAMQqC,EANR,OAOQC,EAAMD,EAAIE,QAAQ,SAClBC,EAAO,IAAIC,KAAK,CAACJ,EAAIK,OAAOJ,IAAO,CAACK,KAAM,kBAC1CC,EAAMC,IAAIC,gBAAgBN,GAClBO,SAASC,cAAc,OAC7BC,iBAAiB,QAAQ,kBAAMJ,IAAIK,gBAAgBN,KAAM,CAACO,MAAM,IACtExB,EAAUiB,GAZd,6CA9Bc,sBA6Cd,OACI,qBAAKQ,UAAU,MAAf,SACA,wBAAQA,UAAU,aAAlB,SACI,gCACKrB,GACG,gCACgB,KAAXL,GACG,6EAIQ,KAAXA,GACG,4BACI,qBAAK2B,IAAI,OAAOC,IAAK5B,EAAQ6B,MAAM,OAAOC,OAAO,cAM/DzB,GACE,gCACI,4BACA,mBAAG0B,KAAK,0FAAR,oFAEA,uBAAMC,SAAU,SAACC,GAAD,OArEtB,2CAqE6BC,CAAgBD,IAAvC,UACI,yDACA,uBACA,uBACIhB,KAAK,OACLkB,MAAOjC,EACPkC,SAAU,SAACH,GAAD,OAAO9B,EAAW8B,EAAEI,OAAOF,aAGzC,uBACA,sEACA,uBACA,uBACIlB,KAAK,OACLkB,MAAO7D,EACP8D,SAAU,SAACH,GAAD,OAAO7B,EAAQ6B,EAAEI,OAAOF,aAGtC,uBACA,uBAAOlB,KAAK,2B,yDCjJzB,K,8GCYAqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCAdQ,IAASC,OACL,qCACI,cAACC,EAAA,EAAD,IACA,cAACnD,EAAA,EAAD,OAEJuB,SAAS6B,eAAe,SAM5BZ,M","file":"static/js/main.6b4940c3.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\n\r\nconst runScript = async (key, date) => {\r\n\r\n    if (date === \"0\") {\r\n        // let gameId = \"19722\" // TODO: Need a way to get this programatically. If user hasn't started the puzzle with this ID then everything will break\r\n        // let gameIdUrl = `https://nyt-games-prd.appspot.com/svc/crosswords/v6/game/${gameId}.json`\r\n        // let userIdRequest = await fetch(gameIdUrl, {\r\n        //     method: \"GET\",\r\n        //     mode: \"cors\", \r\n        //     headers: {\r\n        //         'Content-Type': 'application/json',\r\n        //         'nyt-s': key,\r\n        //         'dnt': 1,\r\n        //         'Accept': 'application/json' \r\n        //     }\r\n        // })\r\n        // let userIdResponse = await userIdRequest.json()\r\n        let userId = \"36569100\" //userIdResponse[\"userID\"]\r\n        let streakUrl = `https://nyt-games-prd.appspot.com/svc/crosswords/v3/${userId}/stats-and-streaks.json?date_start=2014-01-01&start_on_monday=true`\r\n        let streakRequest = await fetch(streakUrl, {\r\n            method: \"GET\",\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'nyt-s': key\r\n            },\r\n            mode: \"cors\"\r\n        })\r\n        let streakResponse = await streakRequest.json()\r\n        let streakDate = streakResponse[\"results\"][\"streaks\"][\"dates\"][0][0]\r\n        date = streakDate\r\n    }\r\n\r\n\r\n    let url = \"https://h9e25h7oj8.execute-api.us-east-1.amazonaws.com/default/nic-crossword-lambda\"\r\n    let request = {\"auth_key\": key, \"earliest_date\": date}\r\n\tlet response = await fetch(url, {\r\n        method: \"POST\",\r\n        header: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(request)\r\n    }) \r\n\tlet image = await response.json()\r\n    console.log(image);\r\n    if (image[\"message\"] !== \"auth key or date not provided\" && image[\"message\"] !== \"sorry, something went wrong\") {\r\n        let returnString = Buffer.from(image[\"content\"], 'base64').toString('utf8')\r\n        return returnString\r\n    }\r\n  \treturn \r\n}\r\n\r\n\r\n\r\nconst App = () => {\r\n    const [output, setOutput] = useState(\"\");\r\n    const [authKey, setAuthKey] = useState(\"\");\r\n    const [date, setDate] = useState(\"\");\r\n    const [isSubmit, setIsSubmit] = useState(false);\r\n\r\n    // useEffect(() => {\r\n    //     const run = async () => {\r\n    //         let out;\r\n    //         if (localStorage.getItem(\"token\") !== null) {\r\n    //             out = await runScript(localStorage.getItem(\"token\"))\r\n    //         } else {\r\n    //             out = await runScript(authKey, date);\r\n    //         }\r\n\r\n    //         if (out != null) {\r\n    //             let img = out.indexOf(\"<svg \")\r\n    //             let blob = new Blob([out.substr(img)], {type: 'image/svg+xml'})\r\n    //             let url = URL.createObjectURL(blob)\r\n    //             let image = document.createElement('img')\r\n    //             image.addEventListener('load', () => URL.revokeObjectURL(url), {once: true})\r\n    //             setOutput(url);\r\n                \r\n    //         }         \r\n\t\t\t\r\n    //     }\r\n    //     run();\r\n\r\n    // }, [authKey, date]);\r\n\r\n    async function afterSubmission(event) {\r\n        event.preventDefault()\r\n        setIsSubmit(true)\r\n        localStorage.setItem(\"token\", authKey)\r\n        localStorage.setItem(\"date\", date)\r\n        \r\n        let out = await runScript(authKey, date)\r\n        let img = out.indexOf(\"<svg \")\r\n        let blob = new Blob([out.substr(img)], {type: 'image/svg+xml'})\r\n        let url = URL.createObjectURL(blob)\r\n        let image = document.createElement('img')\r\n        image.addEventListener('load', () => URL.revokeObjectURL(url), {once: true})\r\n        setOutput(url);\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n        <header className=\"App-header\">\r\n            <div>\r\n                {isSubmit && (\r\n                    <div>\r\n                        {output === \"\" && (\r\n                            <p>\r\n                                loading... (this might take a minute or two)\r\n                            </p>\r\n                        )}\r\n                        {output !== \"\" && (\r\n                            <p>\r\n                                <img alt=\"plot\" src={output} width=\"1000\" height=\"700\" />\r\n                            </p>\r\n                        )}\r\n                    </div>\r\n                )}\r\n\r\n                {!isSubmit && (\r\n                    <div>\r\n                        <p>\r\n                        <a href=\"https://github.com/nicwineburger/crosswordstatswebsite/wiki/Getting-Your-NYT-Auth-Token\">Click here for instructions on how to get your auth-key from the NYT</a>\r\n                        </p>\r\n                        <form onSubmit={(e) => afterSubmission(e)}>\r\n                            <label>Enter your auth-key:\r\n                            <br/>\r\n                            <input\r\n                                type=\"text\"\r\n                                value={authKey}\r\n                                onChange={(e) => setAuthKey(e.target.value)}\r\n                            />\r\n                            </label>\r\n                            <br/>\r\n                            <label>Enter earliest date (YYYY-MM-DD):\r\n                            <br/>\r\n                            <input\r\n                                type=\"text\"\r\n                                value={date}\r\n                                onChange={(e) => setDate(e.target.value)}\r\n                            />\r\n                            </label>\r\n                            <br/>\r\n                            <input type=\"submit\"/>\r\n                        </form>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </header>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport '@fontsource/roboto';\r\nimport CssBaseline from '@mui/material/CssBaseline'\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <>\r\n        <CssBaseline />\r\n        <App />\r\n    </>,\r\n    document.getElementById('root')\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}