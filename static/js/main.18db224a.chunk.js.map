{"version":3,"sources":["python/main.py","logo.svg","App.js","reportWebVitals.js","index.js"],"names":["runScript","code","a","window","loadPyodide","indexURL","pyodide","loadPackage","runPythonAsync","App","useState","output","setOutput","didUploadFile","setDidUploadFile","selectedFile","name","setName","event","target","files","text","textContent","csvContent","console","log","useEffect","run","fetch","script","scriptText","out","className","src","type","value","onChange","e","id","accept","onUpload","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","CssBaseline","document","getElementById"],"mappings":"sOAAe,MAA0B,gC,GCA1B,I,YCMTA,EAAS,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sEACQC,OAAOC,YAAY,CACrCC,SAAU,mDAFA,cACRC,EADQ,gBAIRA,EAAQC,YAAY,SAJZ,uBAKRD,EAAQC,YAAY,cALZ,uBAMRD,EAAQC,YAAY,UANZ,wBAQDD,EAAQE,eAAR,+5DARC,qFAAH,sDA+HAC,EAnDH,WACR,MAA4BC,mBAAS,gBAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAA0CF,oBAAS,GAAnD,mBAAOG,EAAP,KAAsBC,EAAtB,KACA,EAAwCJ,mBAAS,MAAjD,mBAAOK,EAAP,KACA,GADA,KACwBL,mBAAS,KAAjC,mBAAOM,EAAP,KAAaC,EAAb,KAJc,4CAgBd,WAAwBC,GAAxB,eAAAhB,EAAA,sEAC8BgB,EAAMC,OAAOC,MAAM,GAAGC,OADpD,OACUC,EADV,OAGInB,OAAOoB,WAAaD,EACpBE,QAAQC,IAAItB,OAAOoB,YACnBT,GAAiB,GALrB,4CAhBc,sBAwBd,OAlBAY,qBAAU,WACN,IAAMC,EAAG,uCAAG,8BAAAzB,EAAA,sEACwB0B,MAAMC,GAD9B,8BACuCR,OADvC,cACFS,EADE,gBAEU9B,EAAU8B,GAFpB,OAEFC,EAFE,OAGRnB,EAAUmB,GAHF,2CAAH,qDAKTJ,MAED,IAWC,qBAAKK,UAAU,MAAf,SACA,yBAAQA,UAAU,aAAlB,UACKnB,GACG,8BACI,4BACI,qBAAKoB,IAAKtB,SAIpBE,GACM,8BACI,iCACI,uBAAOqB,KAAK,OAAOC,MAAOnB,EAAMoB,SAAU,SAACC,GAAD,OAAOpB,EAAQoB,EAAElB,OAAOgB,UAClE,uBACA,uBAAOD,KAAK,OAAOI,GAAG,aAAatB,KAAK,aAAauB,OAAO,YACxDJ,MAAOpB,EACPqB,SAAU,SAACC,GAAD,OAzCxB,2CAyC+BG,CAASH,iBC/G3CI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACL,qCACI,cAACC,EAAA,EAAD,IACA,cAAC,EAAD,OAEJC,SAASC,eAAe,SAM5Bb,M","file":"static/js/main.18db224a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/main.25188d52.py\";","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { useEffect, useState } from 'react';\r\nimport script from './python/main.py';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\n\r\nconst runScript = async (code) => {\r\n    const pyodide = await window.loadPyodide({\r\n        indexURL: \"https://cdn.jsdelivr.net/pyodide/v0.18.1/full/\"\r\n    });\r\n    await pyodide.loadPackage(\"numpy\")\r\n    await pyodide.loadPackage(\"matplotlib\")\r\n    await pyodide.loadPackage(\"pandas\")\r\n\r\n    return await pyodide.runPythonAsync(`\r\nimport datetime\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nimport io, base64\r\nimport pandas as pd\r\nimport os\r\nimport js\r\n\r\ndef generate():\r\n    csv_path = io.StringIO(js.csvContent)\r\n    df = pd.read_csv(csv_path, parse_dates=[\"date\"], index_col=\"date\")\r\n    df[\"Solved datetime\"] = pd.to_datetime(df[\"solved_unix\"], unit=\"s\")\r\n\r\n    df.index = df[\"Solved datetime\"]\r\n    df = df.sort_index()\r\n\r\n    df = df[\r\n        (df[\"solved_unix\"] - df[\"opened_unix\"] < 3600 * 24 * 7)\r\n        & (df[\"cheated\"] == False)\r\n        & df.solve_time_secs.notnull()\r\n    ]\r\n\r\n    ymax = df[\"solve_time_secs\"].max() / 60\r\n\r\n    fig = plt.figure(figsize=(10, 7), dpi=200)\r\n    today = datetime.date.today().isoformat()\r\n    plt.title(\r\n        f\"NYT crossword solve time (8-week rolling average) as of {today}\"\r\n    )\r\n    ax = fig.gca()\r\n\r\n    CB_color_cycle = ['#377eb8', '#ff7f00', '#4daf4a',\r\n                    '#f781bf', '#a65628', '#984ea3',\r\n                    '#999999', '#e41a1c', '#dede00']\r\n    color_index = 0\r\n\r\n    DAYS = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\r\n    for day in DAYS:\r\n        rolling_avg = df[df[\"weekday\"] == day][\"solve_time_secs\"].rolling(\"56D\").mean()\r\n        (rolling_avg / 60.0).plot(\r\n            ax=ax, label=day, linewidth=2, markersize=4, marker=\"o\", linestyle=\"-\", color=CB_color_cycle[color_index]\r\n        )\r\n        color_index = color_index + 1\r\n\r\n    plt.legend()\r\n    ax.set_xlabel(\"Solve Date\")\r\n    ax.set_ylabel(\"Minutes\")\r\n    minor_yticks = np.arange(0, ymax + 1, 5)\r\n    ax.set_ylim(0, ymax)\r\n    ax.set_yticks(minor_yticks, minor=True)\r\n    plt.xticks(rotation=0)\r\n    ax.figure.autofmt_xdate()\r\n    plt.grid(True, which=\"both\", axis=\"both\")\r\n\r\n\r\n    buf = io.BytesIO()\r\n    fig.savefig(buf, format='png')\r\n    buf.seek(0)\r\n    img_str = 'data:image/png;base64,' + base64.b64encode(buf.read()).decode('UTF-8')\r\n    return img_str\r\n\r\ngenerate()\r\n`);\r\n}\r\n\r\n\r\n\r\nconst App = () => {\r\n    const [output, setOutput] = useState(\"(loading...)\");\r\n    const [didUploadFile, setDidUploadFile] = useState(false);\r\n    const [selectedFile, setSelectedFile] = useState(null);\r\n    const [name, setName] = useState(\"\")\r\n\r\n    useEffect(() => {\r\n        const run = async () => {\r\n            const scriptText = await (await fetch(script)).text();\r\n            const out = await runScript(scriptText);\r\n            setOutput(out);\r\n        }\r\n        run();\r\n\r\n    }, []);\r\n\r\n    async function onUpload(event) {\r\n        const textContent = await event.target.files[0].text()\r\n/*        setSelectedFile(event.target.files[0]);*/\r\n        window.csvContent = textContent;\r\n        console.log(window.csvContent);\r\n        setDidUploadFile(true);\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n        <header className=\"App-header\">\r\n            {didUploadFile && (\r\n                <div>\r\n                    <p>\r\n                        <img src={output} />\r\n                    </p>\r\n                </div>\r\n            )}\r\n            {!didUploadFile && (\r\n                    <div>\r\n                        <form>\r\n                            <input type=\"text\" value={name} onChange={(e) => setName(e.target.value)} />\r\n                            <br/>\r\n                            <input type=\"file\" id=\"file-input\" name=\"file-input\" accept=\".csv,.txt\"\r\n                                value={selectedFile}\r\n                                onChange={(e) => onUpload(e)} />\r\n                        </form>\r\n                </div>\r\n                \r\n            )}\r\n        </header>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@fontsource/roboto';\nimport CssBaseline from '@mui/material/CssBaseline'\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <>\n        <CssBaseline />\n        <App />\n    </>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}