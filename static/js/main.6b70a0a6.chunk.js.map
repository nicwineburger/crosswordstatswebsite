{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["determineNumChunks","inputDate","currentDate","thirtyDays","incrementDate","Date","getTime","numChunks","runScript","key","date","a","url","dataBuffer","oneDay","startDate","toISOString","slice","endDate","request","fetch","method","header","body","JSON","stringify","response","json","responseJson","hasOwnProperty","push","document","getElementById","value","lastChunk","lastChunkJson","console","log","App","useState","isLoading","setIsLoading","authKey","setAuthKey","setDate","isSubmit","setIsSubmit","isError","setIsError","plotData","setPlotData","event","preventDefault","out","parsedArray","i","length","chunkJson","Papa","parse","dynamicTyping","lastDate","j","DAYS","byDayArray","l","dayArray","k","lineData","day","xArr","yArr","solve","x","y","mode","name","className","id","max","data","layout","width","height","title","colorway","href","onSubmit","e","afterSubmission","type","onChange","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","CssBaseline"],"mappings":"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","file":"static/js/main.6b70a0a6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { useEffect, useState } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Plot from 'react-plotly.js';\r\nimport Papa, { parse } from 'papaparse';\r\n\r\n\r\nfunction determineNumChunks(inputDate, currentDate) {\r\n    let thirtyDays = 1000*60*60*24*30;\r\n\r\n    let incrementDate = new Date(inputDate.getTime() + thirtyDays);\r\n    let numChunks = 0;\r\n\r\n    while (incrementDate < currentDate) {\r\n        numChunks++;\r\n        incrementDate = new Date(incrementDate.getTime() +  thirtyDays);\r\n        if (incrementDate >= currentDate) {\r\n            numChunks++;\r\n            break;\r\n        }\r\n    }\r\n\r\n    return numChunks;\r\n}\r\n\r\nconst runScript = async (key, date) => {\r\n    let url = \"https://h9e25h7oj8.execute-api.us-east-1.amazonaws.com/default/nic-crossword-lambda\"\r\n    let dataBuffer = [];\r\n\r\n    let thirtyDays = 1000*60*60*24*30;\r\n    let oneDay = 1000*60*60*24;\r\n\r\n    let inputDate = new Date(date);\r\n    let currentDate = new Date();\r\n\r\n    let numChunks = determineNumChunks(inputDate, currentDate);\r\n\r\n    let incrementDate = new Date(inputDate.getTime() + thirtyDays);\r\n\r\n    while (incrementDate < currentDate) {\r\n        let startDate = new Date(incrementDate.getTime() - thirtyDays).toISOString().slice(0,10);\r\n        let endDate = new Date(incrementDate).toISOString().slice(0,10);\r\n\r\n        let request = {\"auth_key\": key, \"earliest_date\": startDate, \"end_date\": endDate};\r\n        let response = await fetch(url, {\r\n            method: \"POST\",\r\n            header: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(request)\r\n        }) \r\n        \r\n        let responseJson = await response.json();\r\n        if (responseJson.hasOwnProperty('message')) {\r\n            return responseJson;\r\n        }\r\n        dataBuffer.push(responseJson[\"content\"]);\r\n        document.getElementById('chunkLoading').value = 100 / numChunks;\r\n        numChunks--;\r\n\r\n        incrementDate = new Date(incrementDate.getTime() +  thirtyDays);\r\n\r\n        if (incrementDate >= currentDate) {\r\n            // We probably overshot so we need to get the last chunk up to today\r\n            startDate = new Date(endDate).toISOString().slice(0,10);\r\n            endDate = new Date(currentDate.getTime() - oneDay).toISOString().slice(0,10);\r\n            request = {\"auth_key\": key, \"earliest_date\": startDate, \"end_date\": endDate};\r\n\r\n            let lastChunk = await fetch(url, {\r\n                method: \"POST\",\r\n                header: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(request)\r\n            });\r\n\r\n            let lastChunkJson = await lastChunk.json();\r\n            dataBuffer.push(lastChunkJson[\"content\"]);\r\n            document.getElementById('chunkLoading').value = 100;\r\n            break;\r\n        }\r\n    }\r\n    \r\n    console.log(dataBuffer);\r\n    \r\n  \treturn dataBuffer;\r\n}\r\n\r\n\r\n\r\nconst App = () => {\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [authKey, setAuthKey] = useState(\"\");\r\n    const [date, setDate] = useState(\"\");\r\n    const [isSubmit, setIsSubmit] = useState(false);\r\n    const [isError, setIsError] = useState(false);\r\n    const [plotData, setPlotData] = useState([]);\r\n\r\n    async function afterSubmission(event) {\r\n        setIsSubmit(true)\r\n        event.preventDefault()\r\n        let out;\r\n        out = await runScript(authKey, date);\r\n        if (out.hasOwnProperty('message')) {\r\n            setIsError(true);\r\n        } else {\r\n            let parsedArray = [];\r\n            for (var i = 0; i < out.length; i++) {\r\n                let chunkJson = Papa.parse(out[i], {\r\n                    header: true,\r\n                    dynamicTyping: true\r\n                });\r\n                console.log(chunkJson);\r\n                let lastDate; \r\n                for (var j = 0; j < chunkJson[\"data\"].length; j++) {\r\n                    if (chunkJson[\"data\"][j][\"date\"] !== null) {\r\n                        if (j !== 0) {\r\n                            if (chunkJson[\"data\"][j][\"date\"] !== lastDate[\"date\"]) {\r\n                                parsedArray.push(chunkJson[\"data\"][j]);\r\n                            }\r\n                        }\r\n                        lastDate = chunkJson[\"data\"][j];\r\n                    }\r\n                }\r\n            }\r\n            let DAYS = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\r\n            let byDayArray = [];\r\n            for (var l = 0; l < DAYS.length; l++) {\r\n                let dayArray = [];\r\n                for (var k = 0; k < parsedArray.length; k++) {\r\n                    if (parsedArray[k][\"weekday\"] === DAYS[l]) {\r\n                        dayArray.push(parsedArray[k])\r\n                    }\r\n                }\r\n                byDayArray[DAYS[l]] = dayArray;\r\n            }\r\n\r\n            // To plot our data, we need an array of numbers of solve times\r\n            // and an array of dates they're from. Now we have every day of\r\n            // the week as seperate arrays of JSON.\r\n            // The format of this byDayArray is:\r\n            // byDayArray = {Mon: [0: {date: 'YYYY-MM-DD', solve_time_sec: 0, ...}, 1: {...}, ...], Tue: [...], ...}\r\n            \r\n            \r\n            let lineData = [];\r\n        \r\n            for (var day of DAYS) {\r\n                let dayArray = byDayArray[day];\r\n                let xArr = [];\r\n                let yArr = [];\r\n                for (var solve of dayArray) {\r\n                    xArr.push(solve[\"date\"]);\r\n                    yArr.push(solve[\"solve_time_secs\"] / 60);\r\n                }\r\n                lineData.push({x: xArr, y: yArr, mode: 'lines', name: day})\r\n            }\r\n\r\n            \r\n            console.log(byDayArray);\r\n            console.log(lineData);\r\n            setPlotData(lineData);\r\n            setIsLoading(false);\r\n        }\r\n\r\n        // let img = out.indexOf(\"<svg \")\r\n        // let blob = new Blob([out.substr(img)], {type: 'image/svg+xml'})\r\n        // let url = URL.createObjectURL(blob)\r\n        // let image = document.createElement('img')\r\n        // image.addEventListener('load', () => URL.revokeObjectURL(url), {once: true})\r\n        //setOutput(url);\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n        <header className=\"App-header\">\r\n            <div>\r\n                {isSubmit && !isError && (\r\n                    <div>\r\n                        {isLoading && (\r\n                            <progress id=\"chunkLoading\" value=\"0\" max=\"100\">0 % of data downloaded</progress>\r\n                        )}\r\n                        {!isLoading && (\r\n                            <Plot\r\n                                data={plotData}\r\n                            // data={[\r\n                            //   {\r\n                            //     x: [1, 2, 3],\r\n                            //     y: [2, 6, 3],\r\n                            //     type: 'scatter',\r\n                            //     mode: 'lines+markers',\r\n                            //     marker: {color: 'red'},\r\n                            //   },\r\n                            //   {type: 'bar', x: [1, 2, 3], y: [2, 5, 3]},\r\n                            // ]}\r\n                            layout={ {\r\n                                width: 740, \r\n                                height: 580, \r\n                                title: 'NYT Crossword Solves Over Time',\r\n                                colorway: ['#377eb8', '#ff7f00', '#4daf4a',\r\n                                '#f781bf', '#a65628', '#984ea3',\r\n                                '#999999']\r\n                            } }\r\n                          />\r\n                            // <p>\r\n                            //     <img alt=\"plot\" src={output} width=\"1000\" height=\"700\" />\r\n                            // </p>\r\n                        )}\r\n                    </div>\r\n                )}\r\n\r\n                {!isSubmit && (\r\n                    <div>\r\n                        <p>\r\n                        <a href=\"https://github.com/nicwineburger/crosswordstatswebsite/wiki/Getting-Your-NYT-Auth-Token\">Click here for instructions on how to get your auth-key from the NYT</a>\r\n                        </p>\r\n                        <form onSubmit={(e) => afterSubmission(e)}>\r\n                            <label>Enter your auth-key:\r\n                            <br/>\r\n                            <input\r\n                                type=\"text\"\r\n                                value={authKey}\r\n                                onChange={(e) => setAuthKey(e.target.value)}\r\n                            />\r\n                            </label>\r\n                            <br/>\r\n                            <label>Enter earliest date (YYYY-MM-DD):\r\n                            <br/>\r\n                            <input\r\n                                type=\"text\"\r\n                                value={date}\r\n                                onChange={(e) => setDate(e.target.value)}\r\n                            />\r\n                            </label>\r\n                            <br/>\r\n                            <input type=\"submit\"/>\r\n                        </form>\r\n                    </div>\r\n                )}\r\n\r\n                {isError && isSubmit && (\r\n                    <div>\r\n                        <p>\r\n                            Sorry, something went wrong. Please try again.\r\n                        </p>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </header>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport '@fontsource/roboto';\r\nimport CssBaseline from '@mui/material/CssBaseline'\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <>\r\n        <CssBaseline />\r\n        <App />\r\n    </>,\r\n    document.getElementById('root')\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}